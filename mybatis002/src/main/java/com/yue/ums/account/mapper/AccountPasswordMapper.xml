<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yue.ums.account.client.AccountPasswordMapper">
  <resultMap id="BaseResultMap" type="com.yue.ums.account.model.AccountPassword">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="passhash" jdbcType="VARCHAR" property="passhash" />
    <result column="last_passhash" jdbcType="VARCHAR" property="lastPasshash" />
    <result column="error_times" jdbcType="INTEGER" property="errorTimes" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, passhash, last_passhash, error_times, update_time, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account_password
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account_password
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yue.ums.account.model.AccountPassword">
    insert into account_password (id, user_id, passhash, 
      last_passhash, error_times, update_time, 
      create_time)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{passhash,jdbcType=VARCHAR}, 
      #{lastPasshash,jdbcType=VARCHAR}, #{errorTimes,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.yue.ums.account.model.AccountPassword">
    insert into account_password
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="passhash != null">
        passhash,
      </if>
      <if test="lastPasshash != null">
        last_passhash,
      </if>
      <if test="errorTimes != null">
        error_times,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="passhash != null">
        #{passhash,jdbcType=VARCHAR},
      </if>
      <if test="lastPasshash != null">
        #{lastPasshash,jdbcType=VARCHAR},
      </if>
      <if test="errorTimes != null">
        #{errorTimes,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yue.ums.account.model.AccountPassword">
    update account_password
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="passhash != null">
        passhash = #{passhash,jdbcType=VARCHAR},
      </if>
      <if test="lastPasshash != null">
        last_passhash = #{lastPasshash,jdbcType=VARCHAR},
      </if>
      <if test="errorTimes != null">
        error_times = #{errorTimes,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yue.ums.account.model.AccountPassword">
    update account_password
    set user_id = #{userId,jdbcType=INTEGER},
      passhash = #{passhash,jdbcType=VARCHAR},
      last_passhash = #{lastPasshash,jdbcType=VARCHAR},
      error_times = #{errorTimes,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>